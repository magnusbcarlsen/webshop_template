services:
  db:
    image: mysql:8.0
    restart: unless-stopped
    mem_limit: 256m
    env_file:
      - .env
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    volumes:
      - ./database:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-net

  minio:
    image: minio/minio:latest
    restart: unless-stopped
    mem_limit: 128m
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_SERVER_URL=https://${DOMAIN}
      - MINIO_BROWSER_REDIRECT_URL=https://console.${DOMAIN}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    networks:
      - app-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    restart: unless-stopped
    mem_limit: 256m
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - DB_PORT=3306
      - DB_USERNAME=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - DB_DATABASE=${MYSQL_DATABASE}
      - PORT=${PORT}
      - FRONTEND_URL=${FRONTEND_URL}
      - NODE_ENV=production
      - JWT_SECRET=${JWT_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - do_spaces_endpoint=http://minio:9000
      - do_spaces_region=us-east-1
      - do_spaces_bucket=${MINIO_BUCKET}
      - do_spaces_key=${MINIO_ROOT_USER}
      - do_spaces_secret=${MINIO_ROOT_PASSWORD}
      - MINIO_INTERNAL_ENDPOINT=http://minio:9000
      - MINIO_PUBLIC_ENDPOINT=https://${DOMAIN}
    depends_on:
      - db
      - minio
    networks:
      - app-net

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_API_BASE_URL=https://${DOMAIN}
        - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
    restart: unless-stopped
    mem_limit: 256m
    ports:
      - "3000:3000"
    env_file:
      - .env
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - BACKEND_URL=${BACKEND_URL}
      - NODE_ENV=production
      - NEXT_PUBLIC_MINIO_PUBLIC_URL=https://${DOMAIN}
      - MINIO_API_HOST=${DOMAIN}
      - MINIO_API_PORT=443
    depends_on:
      - backend
    networks:
      - app-net

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    mem_limit: 64m
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - frontend
      - backend
    networks:
      - app-net

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    mem_limit: 64m
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  mysql_data:
  minio_data:

networks:
  app-net:
    driver: bridge
# services:
#   db:
#     image: mysql:8.0
#     restart: unless-stopped
#     env_file:
#       - .env
#     environment:
#       - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
#       - MYSQL_USER=${MYSQL_USER}
#       - MYSQL_PASSWORD=${MYSQL_PASSWORD}
#       - MYSQL_DATABASE=${MYSQL_DATABASE}
#     volumes:
#       - ./database:/docker-entrypoint-initdb.d
#       - mysql_data:/var/lib/mysql
#     ports:
#       - "3306:3306"
#     networks:
#       - app-net
#     healthcheck:
#       test:
#         [
#           "CMD",
#           "mysqladmin",
#           "ping",
#           "-h",
#           "localhost",
#           "-u",
#           "root",
#           "-p${MYSQL_ROOT_PASSWORD}",
#         ]
#       timeout: 20s
#       retries: 10

#   minio:
#     image: minio/minio:latest
#     restart: unless-stopped
#     environment:
#       - MINIO_ROOT_USER=${MINIO_ROOT_USER}
#       - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
#       - MINIO_SERVER_URL=https://${DOMAIN}
#       - MINIO_BROWSER_REDIRECT_URL=https://console.${DOMAIN}
#     volumes:
#       - minio_data:/data
#     ports:
#       - "9000:9000" # API
#       - "9001:9001" # Console
#     command: server /data --console-address ":9001"
#     networks:
#       - app-net
#     healthcheck:
#       test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
#       interval: 30s
#       timeout: 20s
#       retries: 3

#   backend:
#     build:
#       context: ./backend
#       dockerfile: Dockerfile
#     restart: unless-stopped
#     ports:
#       - "3001:3001"
#     env_file:
#       - .env
#     environment:
#       - DB_HOST=db
#       - DB_PORT=3306
#       - DB_USERNAME=${MYSQL_USER}
#       - DB_PASSWORD=${MYSQL_PASSWORD}
#       - DB_DATABASE=${MYSQL_DATABASE}
#       - PORT=${PORT}
#       - FRONTEND_URL=${FRONTEND_URL}
#       - NODE_ENV=production
#       - JWT_SECRET=${JWT_SECRET}
#       - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
#       - WEBHOOK_SECRET=${WEBHOOK_SECRET}
#       # MinIO Configuration for backend (internal communication)
#       - do_spaces_endpoint=http://minio:9000
#       - do_spaces_region=${do_spaces_region}
#       - do_spaces_bucket=${do_spaces_bucket}
#       - do_spaces_key=${do_spaces_key}
#       - do_spaces_secret=${do_spaces_secret}
#       # MinIO URLs
#       - MINIO_INTERNAL_ENDPOINT=http://minio:9000
#       - MINIO_PUBLIC_ENDPOINT=https://${DOMAIN}
#     depends_on:
#       db:
#         condition: service_healthy
#       minio:
#         condition: service_healthy
#     networks:
#       - app-net
#     # healthcheck:
#     #   test: ["CMD", "curl", "-f", "http://localhost:3001/api/products"]
#     #   interval: 30s
#     #   timeout: 10s
#     #   retries: 3

#   frontend:
#     build:
#       context: ./frontend
#       dockerfile: Dockerfile.dev
#     restart: unless-stopped
#     ports:
#       - "3000:3000"
#     env_file:
#       - .env
#     environment:
#       - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
#       - BACKEND_URL=${BACKEND_URL}
#       - NODE_ENV=production
#       - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
#       - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
#       # MinIO Public URLs for frontend
#       - NEXT_PUBLIC_MINIO_PUBLIC_URL=https://${DOMAIN}
#       - MINIO_API_HOST=${DOMAIN}
#       - MINIO_API_PORT=443
#     depends_on:
#       - backend
#       # backend:
#       #   condition: service_healthy
#     networks:
#       - app-net
#     # healthcheck:
#     #   test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
#     #   interval: 30s
#     #   timeout: 10s
#     #   retries: 3

#   nginx:
#     image: nginx:alpine
#     restart: unless-stopped
#     ports:
#       - "80:80"
#       - "443:443"
#     volumes:
#       - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
#       # - ./nginx/nginx.prod.conf:/etc/nginx/conf.d/default.conf:ro
#       # - ./certbot/conf:/etc/letsencrypt
#       # - ./certbot/www:/var/www/certbot
#     depends_on:
#       - frontend
#       - backend
#       # - minio
#     networks:
#       - app-net
#     command: '/bin/sh -c ''while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g "daemon off;"'''

#   certbot:
#     image: certbot/certbot
#     restart: unless-stopped
#     volumes:
#       - ./certbot/conf:/etc/letsencrypt
#       - ./certbot/www:/var/www/certbot
#     entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

# volumes:
#   mysql_data:
#   minio_data:

# networks:
#   app-net:
#     driver: bridge
