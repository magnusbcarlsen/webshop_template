name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production
    timeout-minutes: 45 # Increased from 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 40m # Increased SSH timeout
          command_timeout: 35m # Increased command timeout
          script_stop: false # Don't stop on individual command failures
          script: |
            set -e

            echo "🚀 Starting optimized deployment..."

            # Navigate to app directory
            cd /var/www/webshop

            # Pull latest code
            echo "📥 Pulling latest code..."
            timeout 120 git fetch origin || echo "Git fetch timeout, continuing..."
            timeout 60 git reset --hard origin/main || echo "Git reset timeout, continuing..."

            # Clean workspace
            echo "🧹 Cleaning workspace..."
            git clean -fd -e certbot/ || echo "Git clean completed with warnings"

            # Create environment file FIRST (before building)
            echo "⚙️ Setting up environment..."
            cat > .env << 'ENVEOF'
            NODE_ENV=production
            ENVIRONMENT=production

            # Database Configuration
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_PORT=3306

            # Backend Database Connection
            DB_HOST=db
            DB_PORT=3306
            DB_USER=${{ secrets.MYSQL_USER }}
            DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            DB_NAME=${{ secrets.MYSQL_DATABASE }}
            DB_USERNAME=${{ secrets.MYSQL_USER }}
            DB_DATABASE=${{ secrets.MYSQL_DATABASE }}

            # Backend Configuration
            PORT=3001
            FRONTEND_URL=https://${{ secrets.DOMAIN }}

            # Frontend Configuration
            BACKEND_URL=http://backend:3001
            NEXT_PUBLIC_API_URL=/api
            NEXT_PUBLIC_API_BASE_URL=https://${{ secrets.DOMAIN }}

            # Security
            JWT_SECRET=${{ secrets.JWT_SECRET }}

            # Stripe Configuration
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

            # MinIO Configuration
            MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
            MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}

            # MinIO URLs
            MINIO_API_HOST=${{ secrets.DOMAIN }}
            MINIO_API_PORT=443
            NEXT_PUBLIC_MINIO_PUBLIC_URL=https://${{ secrets.DOMAIN }}

            # S3-Compatible Settings
            do_spaces_endpoint=http://minio:9000
            do_spaces_region=us-east-1
            do_spaces_bucket=${{ secrets.MINIO_BUCKET }}
            do_spaces_key=${{ secrets.MINIO_ROOT_USER }}
            do_spaces_secret=${{ secrets.MINIO_ROOT_PASSWORD }}

            # MinIO Bucket
            MINIO_BUCKET=${{ secrets.MINIO_BUCKET }}

            # Domain
            DOMAIN=${{ secrets.DOMAIN }}

            # Optimized Node.js Settings for 1GB server
            NODE_OPTIONS=--max-old-space-size=512
            NEXT_TELEMETRY_DISABLED=1
            ENVEOF

            chmod 600 .env

            echo "🔧 Configuration ready..."

            # Create swap file if not exists (helps with memory)
            if [ ! -f /swapfile ]; then
              echo "💾 Creating swap file for build process..."
              sudo fallocate -l 1G /swapfile || echo "Swap creation failed, continuing..."
              sudo chmod 600 /swapfile || true
              sudo mkswap /swapfile || true
              sudo swapon /swapfile || true
            fi

            # Check system resources
            echo "💾 System resources before deployment:"
            free -h || echo "Memory check failed"
            df -h / || echo "Disk check failed"

            # Stop services gracefully with longer timeout
            echo "🛑 Stopping services..."
            timeout 180 docker compose -f docker-compose.prod.yml down --remove-orphans || echo "Stop completed with timeout"

            # More aggressive cleanup to free memory
            echo "🧹 Aggressive cleanup..."
            timeout 60 docker system prune -af || echo "Cleanup completed with timeout"
            timeout 30 docker volume prune -f || echo "Volume cleanup timeout"

            # Check resources after cleanup
            echo "💾 Resources after cleanup:"
            free -h || echo "Memory check failed"

            # Build services sequentially to avoid memory issues
            echo "🏗️ Building services sequentially..."

            # Build backend first
            echo "🔧 Building backend..."
            timeout 800 docker compose -f docker-compose.prod.yml build --no-cache backend || {
              echo "⚠️ Backend build timeout"
            }

            # Build frontend second
            echo "🎨 Building frontend..."
            timeout 800 docker compose -f docker-compose.prod.yml build --no-cache frontend || {
              echo "⚠️ Frontend build timeout"
            }

            # Start services sequentially to avoid startup conflicts
            echo "🚀 Starting services sequentially..."

            # Start infrastructure services first
            echo "📊 Starting infrastructure services..."
            timeout 120 docker compose -f docker-compose.prod.yml up -d db minio || echo "Infrastructure startup timeout"

            # Wait for database to be ready
            echo "⏳ Waiting for database..."
            sleep 30

            # Start backend
            echo "🔧 Starting backend..."
            timeout 120 docker compose -f docker-compose.prod.yml up -d backend || echo "Backend startup timeout"

            # Wait for backend to be ready
            echo "⏳ Waiting for backend..."
            sleep 20

            # Start frontend
            echo "🎨 Starting frontend..."
            timeout 120 docker compose -f docker-compose.prod.yml up -d frontend || echo "Frontend startup timeout"

            # Wait for frontend
            echo "⏳ Waiting for frontend..."
            sleep 20

            # Start nginx and certbot
            echo "🌐 Starting web services..."
            timeout 60 docker compose -f docker-compose.prod.yml up -d nginx certbot || echo "Web services timeout"

            # Final wait and comprehensive health check
            echo "⏳ Final service stabilization..."
            sleep 60

            # Comprehensive health check
            echo "🏥 Comprehensive health check..."

            # Check container status
            echo "📊 Container status:"
            docker compose -f docker-compose.prod.yml ps

            # Check if containers are actually running
            RUNNING_CONTAINERS=$(docker compose -f docker-compose.prod.yml ps --services --filter "status=running" | wc -l)
            echo "✅ Running containers: $RUNNING_CONTAINERS"

            # Test database connection
            echo "🔍 Testing database..."
            docker compose -f docker-compose.prod.yml exec -T db mysqladmin ping -h localhost || echo "Database test failed"

            # Test backend health
            echo "🔍 Testing backend..."
            for i in {1..3}; do
              if timeout 10 curl -f http://localhost:3001/health >/dev/null 2>&1; then
                echo "✅ Backend health check passed!"
                break
              else
                echo "Backend attempt $i/3 failed, waiting..."
                sleep 10
              fi
            done

            # Test frontend
            echo "🔍 Testing frontend..."
            for i in {1..3}; do
              if timeout 10 curl -f http://localhost:3000 >/dev/null 2>&1; then
                echo "✅ Frontend health check passed!"
                break
              else
                echo "Frontend attempt $i/3 failed, waiting..."
                sleep 10
              fi
            done

            # Test nginx
            echo "🔍 Testing nginx..."
            for i in {1..3}; do
              if timeout 10 curl -f http://localhost >/dev/null 2>&1; then
                echo "✅ Nginx health check passed!"
                break
              else
                echo "Nginx attempt $i/3 failed, waiting..."
                sleep 10
              fi
            done

            # Final resource check
            echo "💾 Final system resources:"
            free -h || echo "Memory check failed"
            df -h / || echo "Disk check failed"

            echo "🎉 Deployment completed!"
            echo "🌐 Application: https://${{ secrets.DOMAIN }}"
            echo "📊 Manual verification recommended"
