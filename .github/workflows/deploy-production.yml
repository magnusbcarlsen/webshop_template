name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DO_SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Digital Ocean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT || 22 }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: false
          script: |
            set -e

            echo "🚀 Starting deployment..."

            # Navigate to app directory
            cd /var/www/webshop

            # Pull latest code
            echo "📥 Pulling latest code..."
            git fetch origin
            git reset --hard origin/main

            # Clean git workspace but exclude certbot directories
            echo "🧹 Cleaning workspace (excluding certbot)..."
            git clean -fd -e certbot/

            # Create production environment file
            echo "⚙️ Setting up environment..."
            cat > .env << ENVEOF
            NODE_ENV=production
            ENVIRONMENT=production

            # Database Configuration
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_PORT=3306

            # Backend Database Connection
            DB_HOST=db
            DB_PORT=3306
            DB_USER=${{ secrets.MYSQL_USER }}
            DB_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            DB_NAME=${{ secrets.MYSQL_DATABASE }}
            DB_USERNAME=${{ secrets.MYSQL_USER }}
            DB_DATABASE=${{ secrets.MYSQL_DATABASE }}

            # Backend Configuration
            PORT=3001
            FRONTEND_URL=https://${{ secrets.DOMAIN }}

            # Frontend Configuration
            BACKEND_URL=http://backend:3001
            NEXT_PUBLIC_API_URL=/api
            NEXT_PUBLIC_API_BASE_URL=https://${{ secrets.DOMAIN }}

            # Security
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            CSRF_SECRET=${{ secrets.CSRF_SECRET }}
            SESSION_SECRET=${{ secrets.SESSION_SECRET }}

            # Stripe Configuration
            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            WEBHOOK_SECRET=${{ secrets.WEBHOOK_SECRET }}
            NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

            # MinIO Configuration
            MINIO_ROOT_USER=${{ secrets.MINIO_ROOT_USER }}
            MINIO_ROOT_PASSWORD=${{ secrets.MINIO_ROOT_PASSWORD }}

            # MinIO URLs
            MINIO_API_HOST=${{ secrets.DOMAIN }}
            MINIO_API_PORT=443
            NEXT_PUBLIC_MINIO_PUBLIC_URL=https://${{ secrets.DOMAIN }}

            # S3-Compatible Settings
            do_spaces_endpoint=http://minio:9000
            do_spaces_region=us-east-1
            do_spaces_bucket=${{ secrets.MINIO_BUCKET }}
            do_spaces_key=${{ secrets.MINIO_ROOT_USER }}
            do_spaces_secret=${{ secrets.MINIO_ROOT_PASSWORD }}

            # MinIO Bucket
            MINIO_BUCKET=${{ secrets.MINIO_BUCKET }}

            # Domain
            DOMAIN=${{ secrets.DOMAIN }}

            # Node.js Settings
            NODE_OPTIONS=--max-old-space-size=2048
            NEXT_TELEMETRY_DISABLED=1
            ENVEOF

            # Secure the .env file
            chmod 600 .env

            # Nginx config is already configured for bergstromart.dk
            echo "🔧 Nginx configuration ready..."

            # Stop services gracefully
            echo "🛑 Stopping services..."
            docker compose -f docker-compose.prod.yml down --remove-orphans || true

            # Clean up old images
            echo "🧹 Cleaning up..."
            docker system prune -f || true

            # Build and deploy
            echo "🏗️ Building and starting services..."
            docker compose -f docker-compose.prod.yml up -d --build --force-recreate

            # Wait for services to start
            echo "⏳ Waiting for services to start..."
            sleep 60

            # Run health checks
            echo "🏥 Running health checks..."
            max_attempts=20
            attempt=1

            while [ $attempt -le $max_attempts ]; do
              if curl -f http://localhost/health > /dev/null 2>&1; then
                echo "✅ Health check passed!"
                break
              fi
              
              if [ $attempt -eq $max_attempts ]; then
                echo "❌ Health check failed after $max_attempts attempts"
                echo "📋 Service status:"
                docker compose -f docker-compose.prod.yml ps
                echo "📋 Recent logs:"
                docker compose -f docker-compose.prod.yml logs --tail=20
                exit 1
              fi
              
              echo "Attempt $attempt/$max_attempts failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            done

            echo "🎉 Deployment completed successfully!"
            echo "🌐 Application: https://${{ secrets.DOMAIN }}"
